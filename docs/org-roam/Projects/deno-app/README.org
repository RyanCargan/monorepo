:PROPERTIES:
:ID:       117f4156-dcc5-461b-bddb-726e22d735c5
:END:
Deno app.
* Files
** root
:PROPERTIES:
:ID:       0305b877-3bec-40f4-9e06-325d4728a538
:tangle-dir: ../../../../projects/deno-app
:END:
#+begin_src deno :noweb yes :tangle (org-in-tangle-dir "index.mjs") :mkdirp yes :exports both :allow net :results output
const response = await fetch("https://httpbin.org/get?hello=world");
const json = await response.json();

console.log(json.args);
#+end_src

#+RESULTS:
: { hello: "world" }
** src
*** main.mjs
:PROPERTIES:
:ID:       ef4eb3aa-d8a0-445c-970b-7359a17dcf46
:tangle-dir: ../../../../projects/deno-app/src
:END:
#+begin_src deno :mkdirp yes :noweb eval :tangle (org-in-tangle-dir "main.mjs") :allow net
import * as pt from 'path'
import * as a from 'afr'
import {E} from 'prax'
import * as x from 'prax'

const afrOpts = {port: 36582}
const srvOpts = {port: 36583, hostname: 'localhost'}
const dirs = [a.dir('target'), a.dir('static')]

const routes = [
  {pathname: '/',       path: 'target/index.html', fun: Index},
  {pathname: undefined, path: 'target/404.html',   fun: NotFound},
]

const notFound = routes.find(route => !route.pathname)

async function main() {
  if (Deno.args.includes('html')) await html()
  if (Deno.args.includes('srv')) await srv()
}

async function html() {
  for (const {path, fun} of routes) {
    await Deno.mkdir(pt.dirname(path), {recursive: true})
    await Deno.writeTextFile(path, await fun())
  }
  console.log('[html] done')
}

async function srv() {
  const lis = Deno.listen(srvOpts)
  console.log(`[srv] listening on http://${srvOpts.hostname || 'localhost'}:${srvOpts.port}`)
  watch()
  for await (const conn of lis) serveHttp(conn)
}

async function serveHttp(conn) {
  for await (const event of Deno.serveHttp(conn)) {
    respond(event)
  }
}

async function respond(event) {
  const {request: req} = event
  try {
    await event.respondWith(response(req))
  }
  catch (err) {
    console.error(`[srv] unexpected error while serving ${req.url}:`, err)
  }
}

async function response(req) {
  try {
    return (
      (await a.resSiteWithNotFound(req, dirs)) ||
      (await routeResponse(req)) ||
      new Response('not found', {status: 404})
    )
  }
  catch (err) {
    // console.error(`[srv] unexpected error while serving ${req.url}:`, err)
    return new Response(err?.stack || err?.message || err, {status: 500})
  }
}

async function routeResponse(req) {
  const {pathname} = new URL(req.url)

  const route = routes.find(route => route.pathname === pathname)
  if (route) {
    return new Response(await route.fun(), {headers: htmlHeaders})
  }
  return new Response(await notFound.fun(), {headers: htmlHeaders, status: 404})
}

async function watch() {
  a.maybeSend(a.change, afrOpts)
  for await (const msg of a.watch('.', dirs, {recursive: true})) {
    await a.maybeSend(msg, afrOpts)
  }
}

function Index() {
  return Layout(
    p(`This text was rendered at build or response time.`),
  )
}

function NotFound() {
  return Layout(
    p(`Sorry! Page not found.`),
    E('a', {href: 'index.html'}, `Return home`),
  )
}

function Layout(...children) {
  return x.doc(
    E('html', {},
      E('head', {},
        E('link', {rel: 'icon', href: 'data:;base64,='}),
        E('link', {rel: 'stylesheet', href: '/main.css'}),
        swScript(),
      ),
      E('body', {class: 'center limit'}, children),
      E('script', {type: 'module', src: '/browser.mjs'}),

      Deno.args.includes(srv.name)
      ? E('script', {type: 'module', src: a.clientPath(afrOpts)})
      : null,
    )
  )
}

function swScript() {
  return E('script', {}, new x.Raw(`
    navigator.serviceWorker.register('/sw.mjs')
  `.trim()))
}

export const p = x.e('p', {})
export const ul = x.e('ul', {})
export const li = x.e('li', {})
export const code = x.e('code', {})

const htmlHeaders = {'content-type': 'text/html'}

await main()
#+end_src
*** main.scss
:PROPERTIES:
:ID:       1929e830-0fa2-4b26-b656-b42b4c8e15a6
:tangle-dir: ../../../../projects/deno-app/src
:END:
#+begin_src scss :tangle (org-in-tangle-dir "main.scss")
html {
  font-family: system-ui, sans-serif;
  padding: 4rem;
  background-color: hsl(0, 0%, 14%);
  color: orange;
}

a[href] {color: blue;}
.center {text-align: center;}
.italic {font-style: italic;}
#+end_src
*** imports.json
:PROPERTIES:
:ID:       95d49f68-0852-499e-b1c3-3a260106da09
:tangle-dir: ../../../../projects/deno-app/src
:END:
#+begin_src js :tangle (org-in-tangle-dir "imports.json")
{
  "imports": {
    "path": "https://deno.land/std@0.97.0/path/mod.ts",
    "prax": "https://cdn.jsdelivr.net/npm/prax@0.7.4/str.mjs",
    "afr": "https://deno.land/x/afr@0.5.0/afr.ts"
  }
}
#+end_src
*** Makefile
:PROPERTIES:
:ID:       29f651f9-2d9f-4b58-a139-bc2aa223197f
:tangle-dir: ../../../../projects/deno-app/src
:END:
#+begin_src makefile :tangle (org-in-tangle-dir "Makefile")
MAKEFLAGS := --silent --always-make
PAR := $(MAKE) -j 128
TAR := target
STATIC := static
SASS := sass --no-source-map main.scss:$(TAR)/main.css
DENO := deno run -A --unstable --no-check --import-map imports.json

watch: clean
	$(PAR) styles-w afr-w srv-w

build: clean all

all:
	$(PAR) styles html cp

styles-w:
	$(SASS) --watch

styles:
	$(SASS)

afr-w:
	deno run --allow-net --allow-read --unstable https://deno.land/x/afr@0.5.0/afr.ts --port 36582 --verbose true

srv-w:
	$(DENO) --watch main.mjs srv

html:
	$(DENO) main.mjs html

cp:
ifeq ($(OS), Windows_NT)
	if not exist "$(TAR)" mkdir "$(TAR)"
	copy "$(STATIC)"\* "$(TAR)" >nul
else
	mkdir -p "$(TAR)"
	cp "$(STATIC)"/* "$(TAR)"
endif

clean:
ifeq ($(OS), Windows_NT)
	if exist "$(TAR)" rmdir /s /q "$(TAR)"
else
	rm -rf "$(TAR)"
endif

deps:
ifeq ($(OS), Windows_NT)
	scoop install sass deno
else
	brew install -q sass/sass/sass deno
endif
#+end_src
** static
*** browser.mjs
:PROPERTIES:
:ID:       e712ceb2-7692-4a64-9467-ddd20bd0d895
:tangle-dir: ../../../../projects/deno-app/static
:END:
You can import arbitrary NPM modules, as long as they
conform to the JS module format. This package provides
shortcuts for rendering DOM/HTML via nested function calls.

It's also possible to use a browser-side importmap.
Omitted here for the sake of simplicity. In many modern browsers,
importmaps require an additional polyfill:
https://github.com/guybedford/es-module-shims
#+begin_src deno :mkdirp yes :noweb eval :tangle (org-in-tangle-dir "browser.mjs") :allow net
import {E} from 'https://cdn.jsdelivr.net/npm/prax@0.7.4/dom.mjs'

document.body.append(
  E('p', {class: 'italic'}, `This text was rendered in the browser!`),
)
#+end_src
*** sw.mjs
:PROPERTIES:
:ID:       9112717d-cbb9-4485-96c5-49e97c894675
:tangle-dir: ../../../../projects/deno-app/static
:END:
Semantically-versioned assets from a CDN are assumed to be immutable and ok to cache.
This is useful for offline development, because SW bypasses "disable cache".
In production it's unnecessary but harmless.
Other external requests should just use HTTP cache headers.
#+begin_src deno :noweb eval :tangle (org-in-tangle-dir "sw.mjs") :allow net
self.onfetch = onFetch

function onFetch(event) {
  const {request: req} = event
  if (shouldCache(req.url)) {
    event.respondWith(fetchWithCache(req))
  }
}

async function fetchWithCache(req) {
  const cache = await caches.open('main')

  let res = await cache.match(req)
  if (!res) {
    res = await fetch(req)
    if (res.ok) cache.put(req, res.clone())
  }

  return res
}

function shouldCache(url) {
  return /[@/]v?\d+[.]\d+[.]\d+/.test(url)
}
#+end_src
