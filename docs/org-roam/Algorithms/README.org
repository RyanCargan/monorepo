:PROPERTIES:
:ID:       16812a77-d5ba-4b8c-9bf8-4bae6d3d520d
:END:
Consider using file vars like: ~# -*- org-use-tag-inheritance: nil; -*-~
Information to prep for interview questions related to data structures and algorithms and SE in general.
Use seprate elisp tangle vars for test code and regular code, set to either yes or no.
Most testing frameworks and libs seem to block stdout by default and getting results to show up can be finicky.
Set separate tangled filenames or dirs for test code.
* Software Engineering
** Systematic Program Design
*** Communication
**** Documentation
Use ideas from [[Design Recipes]] as needed here.
You should be trying to develop code, docs and tests more or less alongside each other when possible.
If you need to rush at some point or you need to document and write a test harness for third party code, use your standard workflow as a template and adjust as needed.
***** Literate Doc Comments
***** Standard Code Comments
**** Presentation
**** Context-Specific Advice
*** Test-First Development
Tests in this context act as a specification to constrain and effectively direct development effort.
*** Design Recipes
**** The Role of Domain Expertise
***** Examples
****** Feature Extraction
Picking 'good' features when implementing the k-nearest neighbors (KNN) algorithm.
Good features directly correlate with the items you're trying to recommend.
Good features don't have a bias.
*** Level of Detail
**** Design
**** Implementation
** Essentials
*** Common Algorithms & Data Structures
**** Heap
**** Sliding Window
**** Binary Search
**** DFS & BFS
**** Recursion
**** Hashmap
*** Complexity Tradeoffs for Common Data Structures
Insert/Delete/Search for Big-O & Big-Theta.
| Structure             | I (O) | D (O) | S (O) | I (Theta) | D (Theta) | S (Theta) |
|-----------------------+-------+-------+-------+-----------+-----------+-----------|
| Unsorted Array        |       |       |       |           |           |           |
| Sorted Array          |       |       |       |           |           |           |
| Stack                 |       |       |       |           |           |           |
| Queue                 |       |       |       |           |           |           |
| Unsorted Linked List  |       |       |       |           |           |           |
| Sorted Linked List    |       |       |       |           |           |           |
| Binary Tree           |       |       |       |           |           |           |
| Binary Search Tree    |       |       |       |           |           |           |
| Balanced BST          |       |       |       |           |           |           |
| Heap (Priority Queue) |       |       |       |           |           |           |
| Hashmap               |       |       |       |           |           |           |
| B-Tree                |       |       |       |           |           |           |
*** Common Design Patterns
**** Singelton
**** Facade
***** Factory
**** Bridge/Adapter
**** Strategy
**** Observer
*** Common Code Smells 
**** God class
**** Too many parameters
**** Excessive comments
**** Magic values
**** Conditional logic run amok
*** Basic Types of Unit Tests (3)
**** Return values & exceptions
**** State changes
**** Interaction with external systems
*** Paradigms
**** Declarative
What to do?
***** Functional
A type or subset of the declrative style that utilizes subroutines.
Tends to involve ideas like immutability, referential transparency and recursion.
**** Imperative
How to do it?
***** Procedural
A type or subset of the imperative style that utilizes subroutines.
Tends to involve ideas like mutable state and loops.
** Literate Programming
*** Org Babel
**** :noweb
Use ~eval~ for testing and individual execution.
**** :var
**** :cache
** Personal Metrics
** SOLID Principles
** Paradigms
*** Object-Oriented Programming
*** Functional Programming
*** Procedural Programming
** Design Patterns
*** Adapter
*** Factory
*** Observer
** Language-Specific Issues
*** Operator Precedence
*** Variable & Function Scope
* Computer Science
** Complexity/Asymptotic Analysis
How does an algorithm perform as its input set gets larger?
Recommend watching video 10 and 11 of MIT's /6.0001 Introduction to Computer Science and Programming in Python. Fall 2016/.
*** Notation
**** Big Ο - Worst Case
Expresses upper bound on algorithm runtime.
**** Big θ (Theta) - Average Case
Expresses both upper & lower bound on algorithm runtime.
**** Big Ω (Omega) - Best Case
Expresses lower bound on algorithm runtime.
**** Examples
Applicable to all three types.
| Name        | Symbols       |
|-------------+---------------|
| Constant    | $O(1)$        |
| Logarithmic | $O(\log{}n)$  |
| Linear      | $O(n)$        |
| $n\log{}n$  | $O(n\log{}n)$ |
| Quadratic   | $O(n^2)$      |
| Cubic       | $O(n^3)$      |
| Polynomial  | $n^{O(1)}$    |
| Exponential | $2^{O(n)}$    |
Polynomial time is apparently particularly relevant as an upper bound (see Cobham's thesis which asserts that feasible computation is only possible for problems if they're in complexity class P, which includes all decision problems solvable via deterministic Turing machine in polynomial time).
*** Tradeoffs
- Space versus time
- Average verus worst versus best case
  The former two are the most widely used.
- Other tradeoffs to consider
  Time to implement.
  Ease of comprehension (i.e. ease of maintenance). 
** Algorithms
*** Standard Search & Sort Algorithms
'Cookier cutter' search & sort algorithms go in subsections under this one.
More advanced/specialized algorithms (even if they have 'sort' or 'search' in their name) will be in their own sections (e.g. [[Topological Sort]]).
Recommend watching video 12 of MIT's /6.0001 Introduction to Computer Science and Programming in Python. Fall 2016/.
**** Binary Search
***** Requirements
Data is sorted in advance.
*** Dynamic Programming
**** Top-Down (Memoization)
***** Use Cases
****** Simple Regular Expressions
**** Bottom-Up (Tabulation)
*** Topological Sort
**** Requirements
Directed acyclic graph.
**** Use Cases
***** Dependency Management
***** Scheduling
*** KNN
k-NN/k-nearest neighbors.
*** Naive Bayes
*** Distributed Algorithms
**** MapReduce
*** Probabilistic Algorithms
**** HyperLogLog
** Data Structures
Start composing some generic node-based data structures in C++ for practice.
*** Arrays
*** Linked Lists
*** Hash Map (also Hash Table & Dictionary)
*** Graphs
*** Distributed Data Structures
**** Distributed Hash Table
*** Probabilistic Data Structures
**** Bloom Filter
* Templates
** Folder1
*** File1
**** block1
- ~Number String Image -> Image~ (function signature before names are chosen.
- Statement of purpose with context related to dependencies and dependents.
(Source for unit tests acting as usage example.)
#+name: block1_test
#+begin_src python :tangle no :results value :noweb-ref assign_abc
abc = "abc"
#+end_src

#+RESULTS: block1_test

(Source stub/header to be expanded later, after test is written.)
#+begin_src python :noweb eval :results output
def x():
    <<assign_abc>>
    return abc

print(x())
#+end_src

#+RESULTS:
: abc
** Folder2
*** File1
**** block1
- ~Number String Image -> Image~ (function signature before names are chosen.
- Statement of purpose with context related to dependencies and dependents.
(Source for unit tests acting as usage example.)
#+name: block2_test
#+begin_src python :tangle no :results both :noweb-ref test_2
import unittest
import logging

class TestAddFishToAquarium(unittest.TestCase):
    def test_add_item_to_list_success(self):
        actual = add_item_to_list(list1=["item1", "item2"])
        expected = {"list_a": ["item1", "item2"]}
        self.assertEqual(actual, expected)

log = logging.getLogger(__name__)
log.debug("Messages shown when debugging.")
#+end_src

#+RESULTS: block2_test
: None

#+RESULTS: block1_test
: None

(Source stub/header to be expanded later, after test is written.)
#+begin_src python :noweb eval :results both
def add_items_to_list(list1):
    if len(list1) > 10:
        raise ValueError("Max 10.")
    return {"list_a": list1}
<<test_1>>
#+end_src

#+RESULTS:
: None
** Folder3
*** File3
**** block3
- ~Number String Image -> Image~ (function signature before names are chosen.
- Statement of purpose with context related to dependencies and dependents.
(Source for unit tests acting as usage example.)
#+name: block3_test
#+begin_src python :tangle no :results both :noweb-ref test_3
import pytest

if __name__ == '__test_disabling_capturing__':
    pytest.main(['--capture=no'])

def test_disabling_capturing(capsys):
    print('captured output')
    with capsys.disabled():
        print('goes to sys.stdout instead')
    print('captured')
#+end_src

#+RESULTS: block3_test
: None

(Source stub/header to be expanded later, after test is written.)
#+begin_src python :noweb eval :results both
def add_items_to_list(list1):
    if len(list1) > 10:
        raise ValueError("A maximum of 10 fish can be added to the aquarium")
    return {"list_a": list1}
<<test_3>>
#+end_src

#+RESULTS:
: None
* Query before eval examples
#+begin_src shell :eval (if (y-or-n-p "Run op1?") "yes" "no") :dir ~/ :results value
  thunar .
#+end_src

#+RESULTS:
: 0

#+begin_src shell :eval (my/query) :wrap "src shell"
  echo "ls"
#+end_src

#+RESULTS:
#+begin_src shell
ls
#+end_src

#+RESULTS:
| README.org  |
| README.org~ |

* Local variables :noexport:
# local variables:
# query: ?
# end:
