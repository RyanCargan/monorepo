:PROPERTIES:
:ID:       2ead930d-56dc-4540-9b86-20c4484325ce
:END:
Project management method.
* Basic Table Structure
Mirrored/inverted Kanban board with tasks pulled from right to left.
| Done | Test (Active) | Dev (Done) | Dev (Track) | Dev (Active) | Analysis (Done) | Analysis (Active) | Backlog |
|------+---------------+------------+-------------+--------------+-----------------+-------------------+---------|
|      |               |            |             |              |                 |                   |         |
** Columns
*** Backlog
Priority queue.
Try to keep a single related cluster in focus near the top at any given time.
*** Analysis (Breakdown) Phase
Initial ideas.
Hardest stuff first in the absence of other criteria.
Make sure each task cluster has a 'switch on'/'deliver' task/sub-task to combine sub-tasks and ship complete features, since most sub-tasks provide no value to the client until their cluster is complete.
*** Dev (Answer/Implementation/Solution) Phase
Despite the phase names, some types of 'tests' like unit tests (as they are used in test-driven or test-first development/design) might belong here instead of the next phase.
*** Test (Validation/Feedback) Phase
QA (E2E tests and similar measures) followed by client feedback happens here.
** Anti-Patterns
Moving items back is one.
Sole exception is dev track items moving to active dev.
** Metrics
Err on the side of splitting items up too much unless you want one unsually large (i.e. excessively time or effort consuming) task to mess with your metrics.
Try your best to keep tasks similar in time and effort to each other.
If you think it'll last longer than one pomodoro break it up.

If a certain 'type' of task takes a shorter amount of time than expected, merge it into a larger related task next time.
If a type of task takes a longer amount of time than expected, split it into a cluster of related tasks next time.
A task taking too long means you overestimated your abilities while finishing a task earlier than expected means you underestimated your abilities.
Both situations are a problem since they mess with your ability to make estimates (i.e. predictive power).
The end goal should be to find out what /you/ could do within a given timeframe with the skillset that you had a given point in time.

If you take steps to avoid skill-rust (and assuming you don't suffer some kind of major deterioration in health), then your future self should be able to finish a sufficiently similar task in even less time.
The main problem is determining if a new task is 'sufficiently similar' to past tasks.
One method to help might be associating tags with tasks.
Tagging could even be done after tasks are finished as a kind of reflection on lessons learned.
The degree to which tags overlap could help determine the degree to which tasks overlap.
*** WIP Limits
Analysis - 1
Dev - 3
Test - 1

Identify bottlenecks by logging how long a task spends in each (active) column before going to the final 'done' column.
Any time it spends in the done columns before the final will be a result of other tasks occuping the active columns.
Refine metrics further by finding & sorting tags based on the frequency with which they belong to easy/fast or hard/long tasks.
Separating effort from time spent might be useful.
High effort (hard) tasks could be defined as tasks requiring undivided attention or focus to a greater degree.
May also be difficult to switch back to them after switching away.
Express your subjective sentiment on this after tagging.

Some tasks like writing boilerplate (for which you lack ready-made snippets) may be time-consuming but relatively straightforward with a certain outcome.
Other tasks may throw bugs your way due to mistaken assumptions, a general lack of understanding or some other factor causing uncertainty.
The first type of easy but tedious task is usually easier to make more efficient, with solutions ranging from custom snippet libraries to templates and even just improving typing speed among other things.
The second type of hard task may require you to double-check your assumptions more frequently when dealing with similar problems.
Double-checking is time-consuming by itself but can save much more time in situations where you lack sufficient understanding to risk making assumptions.
With many tricky topics, you may grasp a basic and important concept but fail to understand its implications.
Taking notes related to that topic to explore those implications in a more deliberate way and make them explicit can help.

Consider a table, spreadsheet or database for logging finalized tasks after review.
*** Structuring Logs for Analysis
Consider starting with a Kanban/work folder containing a main Org file with a primary table.
Archive previous days and weeks of work into subtrees.
Create new subtrees for analytics.
*** Specific Metrics
*** Velocity
*** Lead and Cycle Time
*** Actionable Agile Metrics
** Urgency & Importance
Monitor and question whether you are prioritizing the things that matter.
* Pomodoro
Keep a timer ticking in the background.
Clock in and clock out tasks to record average completion times for certain types of tasks.
Multiple separate clock outs allowed for sub-tasks/TODOs when a pomodoro ends.
You'll probably end up finishing a task in the middle of pomodoro work session, just clock out and clock in a new task. 
This should help with future estimates.
Type in any relevant short notes and add tags later.
